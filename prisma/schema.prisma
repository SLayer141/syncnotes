// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(cuid())
  name              String?
  email             String?            @unique
  password          String?
  emailVerified     DateTime?
  otp               String?
  otpExpiry         DateTime?
  magicLink         String?            @unique
  magicLinkExpiry   DateTime?
  organizations     OrganizationMember[]
  createdNotes      Note[]             @relation("CreatedNotes")
  editedNotes       NoteEdit[]         @relation("EditedNotes")
}

model Organization {
  id          String    @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  members     OrganizationMember[]
  notes       Note[]
}

model OrganizationMember {
  id             String       @id @default(cuid())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  role          String       @default("MEMBER") // ADMIN, MEMBER, VIEWER
  joinedAt      DateTime     @default(now())

  @@unique([organizationId, userId])
  @@index([organizationId])
  @@index([userId])
}

model Note {
  id          String      @id @default(cuid())
  title       String
  content     String      @db.Text
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdBy   User        @relation("CreatedNotes", fields: [createdById], references: [id], onDelete: Cascade)
  createdById String
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  editHistory NoteEdit[]
  isShared    Boolean     @default(false)

  @@index([organizationId])
  @@index([createdById])
}

model NoteEdit {
  id        String   @id @default(cuid())
  noteId    String
  note      Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)
  editedBy  User     @relation("EditedNotes", fields: [editedById], references: [id], onDelete: Cascade)
  editedById String
  title     String
  content   String   @db.Text
  editedAt  DateTime @default(now())

  @@index([noteId])
  @@index([editedById])
}
